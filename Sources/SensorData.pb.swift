/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: SensorData.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct SensorDataModel: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "SensorDataModel"}
  public var protoMessageName: String {return "SensorDataModel"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "deviceID": 1,
    "temperature": 2,
    "humidity": 3,
    "pressure": 4,
    "uv": 5,
    "date": 6,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "deviceID": 1,
    "temperature": 2,
    "humidity": 3,
    "pressure": 4,
    "uv": 5,
    "date": 6,
  ]}

  public var deviceId: String = ""

  public var temperature: Float = 0

  public var humidity: Float = 0

  public var pressure: Float = 0

  public var uv: Float = 0

  public var date: Double = 0

  public init() {}

  public init(deviceId: String? = nil,
    temperature: Float? = nil,
    humidity: Float? = nil,
    pressure: Float? = nil,
    uv: Float? = nil,
    date: Double? = nil)
  {
    if let v = deviceId {
      self.deviceId = v
    }
    if let v = temperature {
      self.temperature = v
    }
    if let v = humidity {
      self.humidity = v
    }
    if let v = pressure {
      self.pressure = v
    }
    if let v = uv {
      self.uv = v
    }
    if let v = date {
      self.date = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &deviceId)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &temperature)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &humidity)
    case 4: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &pressure)
    case 5: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &uv)
    case 6: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &date)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if deviceId != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: deviceId, protoFieldNumber: 1, protoFieldName: "deviceID", jsonFieldName: "deviceID", swiftFieldName: "deviceId")
    }
    if temperature != 0 {
      try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: temperature, protoFieldNumber: 2, protoFieldName: "temperature", jsonFieldName: "temperature", swiftFieldName: "temperature")
    }
    if humidity != 0 {
      try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: humidity, protoFieldNumber: 3, protoFieldName: "humidity", jsonFieldName: "humidity", swiftFieldName: "humidity")
    }
    if pressure != 0 {
      try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: pressure, protoFieldNumber: 4, protoFieldName: "pressure", jsonFieldName: "pressure", swiftFieldName: "pressure")
    }
    if uv != 0 {
      try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: uv, protoFieldNumber: 5, protoFieldName: "uv", jsonFieldName: "uv", swiftFieldName: "uv")
    }
    if date != 0 {
      try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: date, protoFieldNumber: 6, protoFieldName: "date", jsonFieldName: "date", swiftFieldName: "date")
    }
  }

  public func _protoc_generated_isEqualTo(other: SensorDataModel) -> Bool {
    if deviceId != other.deviceId {return false}
    if temperature != other.temperature {return false}
    if humidity != other.humidity {return false}
    if pressure != other.pressure {return false}
    if uv != other.uv {return false}
    if date != other.date {return false}
    return true
  }
}

public struct SensorDataResult: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "SensorDataResult"}
  public var protoMessageName: String {return "SensorDataResult"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: [SensorDataModel] = []

  public init() {}

  public init(data: [SensorDataModel] = [])
  {
    if !data.isEmpty {
      self.data = data
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: SensorDataModel.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedMessageField(value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: SensorDataResult) -> Bool {
    if data != other.data {return false}
    return true
  }
}
