/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: SensorData.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct SensorDataModel: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  var protoMessageName: String {return "SensorDataModel"}
  var protoPackageName: String {return ""}
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "deviceID"),
    2: .same(proto: "temperature"),
    3: .same(proto: "humidity"),
    4: .same(proto: "pressure"),
    5: .same(proto: "uv"),
  ]


  var deviceId: String = ""

  var temperature: Float = 0

  var humidity: Float = 0

  var pressure: Float = 0

  var uv: Float = 0

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &deviceId)
    case 2: try decoder.decodeSingularFloatField(value: &temperature)
    case 3: try decoder.decodeSingularFloatField(value: &humidity)
    case 4: try decoder.decodeSingularFloatField(value: &pressure)
    case 5: try decoder.decodeSingularFloatField(value: &uv)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if deviceId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: deviceId, fieldNumber: 1)
    }
    if temperature != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: temperature, fieldNumber: 2)
    }
    if humidity != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: humidity, fieldNumber: 3)
    }
    if pressure != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: pressure, fieldNumber: 4)
    }
    if uv != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: uv, fieldNumber: 5)
    }
  }

  func _protoc_generated_isEqualTo(other: SensorDataModel) -> Bool {
    if deviceId != other.deviceId {return false}
    if temperature != other.temperature {return false}
    if humidity != other.humidity {return false}
    if pressure != other.pressure {return false}
    if uv != other.uv {return false}
    return true
  }
}

struct SensorDataResult: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  var protoMessageName: String {return "SensorDataResult"}
  var protoPackageName: String {return ""}
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: [SensorDataModel] = []

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedMessageField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedMessageField(value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: SensorDataResult) -> Bool {
    if data != other.data {return false}
    return true
  }
}
